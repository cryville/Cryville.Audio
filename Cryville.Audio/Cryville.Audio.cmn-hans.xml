<?xml version="1.0"?>
<doc>
	<assembly>
		<name>Cryville.Audio</name>
	</assembly>
	<members>
		<member name="T:Cryville.Audio.AudioClient">
			<summary>
			管理与 <see cref="T:Cryville.Audio.IAudioDevice" /> 连接的音频客户端。
			</summary>
		</member>
		<member name="M:Cryville.Audio.AudioClient.Dispose">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.AudioClient.Dispose(System.Boolean)">
			<summary>
			执行与释放或重置非托管资源关联的应用程序定义的任务。
			</summary>
			<param name="disposing">该方法是否由用户调用。</param>
		</member>
		<member name="P:Cryville.Audio.AudioClient.Device">
			<summary>
			客户端的设备。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.DefaultBufferDuration">
			<summary>
			客户端的默认缓存时长（毫秒）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.MinimumBufferDuration">
			<summary>
			客户端的最小缓存时长（毫秒）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.DefaultFormat">
			<summary>
			设备的默认波形格式。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.Format">
			<summary>
			当前连接使用的波形格式。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.BufferSize">
			<summary>
			缓存大小（字节）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.MaximumLatency">
			<summary>
			连接的最大延迟（毫秒）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.Playing">
			<summary>
			客户端是否正在播放。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.Position">
			<summary>
			设备流的当前位置（秒）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.BufferPosition">
			<summary>
			缓存的当前位置（秒）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.AudioClient.Source">
			<summary>
			音频源。
			</summary>
		</member>
		<member name="M:Cryville.Audio.AudioClient.IsFormatSupported(Cryville.Audio.WaveFormat,System.Nullable{Cryville.Audio.WaveFormat}@,Cryville.Audio.AudioShareMode)">
			<summary>
				获取设备是否支持 <paramref name="format" />。
			</summary>
			<param name="format">指定的波形格式。</param>
			<param name="suggestion">设备建议的波形格式。如果设备支持 <paramref name="format" /> 则直接返回该参数。如果设备不支持任何格式则返回 <see langword="null" />。</param>
			<param name="shareMode">共享模式。</param>
			<returns>设备是否支持 <paramref name="format" />。</returns>
		</member>
		<member name="M:Cryville.Audio.AudioClient.Init(Cryville.Audio.WaveFormat,System.Single,Cryville.Audio.AudioShareMode)">
			<summary>
			初始化客户端。
			</summary>
			<param name="format">波形格式。</param>
			<param name="bufferDuration">连接的缓存时长（毫秒）。</param>
			<param name="shareMode">连接的共享模式。</param>
			<remarks>不同 API 可能会执行不同的操作。参见实现类的文档。</remarks>
		</member>
		<member name="M:Cryville.Audio.AudioClient.Start">
			<summary>
			开始传输波形数据。
			</summary>
			<remarks>
			如果播放时 <see cref="P:Cryville.Audio.AudioClient.Source" /> 为 <see langword="null" />，则会输出静音。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.AudioClient.Pause">
			<summary>
			暂停传输波形数据。
			</summary>
			<remarks>
			该方法不重置 <see cref="P:Cryville.Audio.AudioClient.Position" /> 和 <see cref="P:Cryville.Audio.AudioClient.BufferPosition" />。
			</remarks>
		</member>
		<member name="T:Cryville.Audio.AudioShareMode">
			<summary>
			音频连接的共享模式。
			</summary>
		</member>
		<member name="F:Cryville.Audio.AudioShareMode.Shared">
			<summary>
			以比 <see cref="F:Cryville.Audio.AudioShareMode.Exclusive" /> 模式更高的延迟为代价，与其它连接共享设备。输出的数据将被音频服务混音。
			</summary>
		</member>
		<member name="F:Cryville.Audio.AudioShareMode.Exclusive">
			<summary>
			当前连接以低延迟独占设备。
			</summary>
			<remarks>初始化独占模式下的连接需要设备支持，且该设备当前未被占用。</remarks>
		</member>
		<member name="T:Cryville.Audio.DataFlow">
			<summary>
			音频连接的数据流向。
			</summary>
		</member>
		<member name="F:Cryville.Audio.DataFlow.Out">
			<summary>
			数据从软件流向硬件。
			</summary>
		</member>
		<member name="F:Cryville.Audio.DataFlow.In">
			<summary>
			数据从硬件流向软件。
			</summary>
		</member>
		<member name="F:Cryville.Audio.DataFlow.All">
			<summary>
			任意数据流向。
			</summary>
		</member>
		<member name="T:Cryville.Audio.EngineBuilder">
			<summary>
			Cryville.Audio 的推荐入口，用于创建一个 <see cref="T:Cryville.Audio.IAudioDeviceManager" />。
			</summary>
		</member>
		<member name="F:Cryville.Audio.EngineBuilder.Engines">
			<summary>
			可用引擎列表。
			</summary>
		</member>
		<member name="M:Cryville.Audio.EngineBuilder.Create">
			<summary>
			创建一个推荐的 <see cref="T:Cryville.Audio.IAudioDeviceManager" />。
			</summary>
			<returns>一个推荐的 <see cref="T:Cryville.Audio.IAudioDeviceManager" />。如果没有支持的引擎则返回 <see langword="null" />。</returns>
		</member>
		<member name="T:Cryville.Audio.IAudioDevice">
			<summary>
			音频设备。
			</summary>
		</member>
		<member name="P:Cryville.Audio.IAudioDevice.Name">
			<summary>
			设备的通俗名称。
			</summary>
		</member>
		<member name="P:Cryville.Audio.IAudioDevice.DataFlow">
			<summary>
			设备的数据流向。
			</summary>
		</member>
		<member name="M:Cryville.Audio.IAudioDevice.Connect">
			<summary>
			连接到设备。
			</summary>
			<returns>一个用于与设备交互的 <see cref="T:Cryville.Audio.AudioClient" />。</returns>
		</member>
		<member name="T:Cryville.Audio.IAudioDeviceManager">
			<summary>
			管理 <see cref="T:Cryville.Audio.IAudioDevice" /> 的音频设备管理器。
			</summary>
			<remarks>
			如果系统不支持一个 <see cref="T:Cryville.Audio.IAudioDeviceManager" />，尝试创建其实例时将抛出异常。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.IAudioDeviceManager.GetDevices(Cryville.Audio.DataFlow)">
			<summary>
			获取指定 <paramref name="dataFlow" /> 的所有音频设备。
			</summary>
			<param name="dataFlow">数据流向。</param>
		</member>
		<member name="M:Cryville.Audio.IAudioDeviceManager.GetDefaultDevice(Cryville.Audio.DataFlow)">
			<summary>
			获取指定 <paramref name="dataFlow" /> 的默认音频设备。
			</summary>
			<param name="dataFlow">数据流向。</param>
		</member>
		<member name="T:Cryville.Audio.OpenSL.Engine">
			<summary>
			一个与 OpenSL ES 交互的 <see cref="T:Cryville.Audio.IAudioDeviceManager" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.OpenSL.Engine.#ctor">
			<summary>
			创建一个 <see cref="T:Cryville.Audio.OpenSL.Engine" /> 类的实例。
			</summary>
		</member>
		<member name="M:Cryville.Audio.OpenSL.Engine.Finalize">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.Engine.Dispose">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.Engine.Dispose(System.Boolean)">
			<summary>
			执行与释放或重置非托管资源关联的应用程序定义的任务。
			</summary>
			<param name="disposing">该方法是否由用户调用。</param>
		</member>
		<member name="M:Cryville.Audio.OpenSL.Engine.GetDefaultDevice(Cryville.Audio.DataFlow)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.Engine.GetDevices(Cryville.Audio.DataFlow)">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.OpenSL.OutputClient">
			<summary>
			一个与 OpenSL ES 交互的 <see cref="T:Cryville.Audio.AudioClient" />。
			</summary>
			<remarks>
			如果使用了 AOT，参见 <see cref="P:Cryville.Audio.OpenSL.OutputClient.CallbackFunction" />。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputClient.Dispose(System.Boolean)">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.Device">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.DefaultBufferDuration">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.MinimumBufferDuration">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.DefaultFormat">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.Format">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.BufferSize">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.MaximumLatency">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.Position">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.BufferPosition">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputClient.CallbackFunction">
			<summary>
			缓存队列回调函数。
			</summary>
			<remarks>
			<para>在使用了 AOT 的情况下，应当用一个支持 AOT 的函数覆盖该属性。覆盖的函数应当调用 <see cref="M:Cryville.Audio.OpenSL.OutputClient.Callback(System.IntPtr,System.IntPtr)" />，如下面这个代码片段所示：</para>
			<code>
			[MonoPInvokeCallback(typeof(slBufferQueueCallback))]
			static void AOTCallback(IntPtr caller, IntPtr context) {
				OutputClient.Callback(caller, context);
			}
			</code>
			<para>其它情况下，不应当覆盖默认回调函数。</para>
			</remarks>
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputClient.Init(Cryville.Audio.WaveFormat,System.Single,Cryville.Audio.AudioShareMode)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputClient.IsFormatSupported(Cryville.Audio.WaveFormat,System.Nullable{Cryville.Audio.WaveFormat}@,Cryville.Audio.AudioShareMode)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputClient.Pause">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputClient.Start">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputClient.Callback(System.IntPtr,System.IntPtr)">
			<summary>
			See <see cref="P:Cryville.Audio.OpenSL.OutputClient.CallbackFunction" />.
			</summary>
		</member>
		<member name="T:Cryville.Audio.OpenSL.OutputDevice">
			<summary>
			一个与 OpenSL ES 交互的 <see cref="T:Cryville.Audio.IAudioDevice" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputDevice.Finalize">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputDevice.Dispose">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputDevice.Dispose(System.Boolean)">
			<summary>
			执行与释放或重置非托管资源关联的应用程序定义的任务。
			</summary>
			<param name="disposing">该方法是否由用户调用。</param>
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputDevice.Name">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.OpenSL.OutputDevice.DataFlow">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.OpenSL.OutputDevice.Connect">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.Source.AudioSource">
			<summary>
			提供波形数据的音频源。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.AudioSource.Dispose">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.AudioSource.Dispose(System.Boolean)">
			<summary>
			执行与释放或重置非托管资源关联的应用程序定义的任务。
			</summary>
			<param name="disposing">该方法是否由用户调用。</param>
		</member>
		<member name="P:Cryville.Audio.Source.AudioSource.Muted">
			<summary>
			音频源是否被静音。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.AudioSource.Format">
			<summary>
			输出波形格式。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.AudioSource.BufferSize">
			<summary>
			缓存大小（字节）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.AudioSource.EndOfData">
			<summary>
			音频源是否到达了数据末尾。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.AudioSource.OnSetFormat">
			<summary>
			当波形格式和缓存大小被设置时被调用。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.AudioSource.IsFormatSupported(Cryville.Audio.WaveFormat)">
			<summary>
			获取音频源是否支持 <paramref name="format" />。
			</summary>
			<param name="format">波形格式。</param>
		</member>
		<member name="M:Cryville.Audio.Source.AudioSource.FillBuffer(System.Byte[],System.Int32,System.Int32)">
			<summary>
			将 <see cref="T:Cryville.Audio.AudioClient" /> 请求的波形数据填充到缓存。
			</summary>
			<param name="buffer">被填充的缓存。</param>
			<param name="offset"><paramref name="buffer" /> 中开始填充处的索引（字节）。</param>
			<param name="length">需要填充的长度（字节）。</param>
			<remarks>
			出于性能优化，调用者必须确保 <paramref name="buffer" /> 不为 <see langword="null" /> 且 <paramref name="length" /> 不大于 <paramref name="buffer" /> 的长度。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.Source.AudioSource.SilentBuffer(System.Byte[],System.Int32,System.Int32)">
			<summary>
			将静音填充到缓存。
			</summary>
			<param name="buffer">被填充的缓存。</param>
			<param name="offset"><paramref name="buffer" /> 中开始填充处的索引（字节）。</param>
			<param name="length">需要填充的长度（字节）。</param>
			<remarks>
			出于性能优化，调用者必须确保 <paramref name="buffer" /> 不为 <see langword="null" /> 且 <paramref name="length" /> 不大于 <paramref name="buffer" /> 的长度。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.Source.AudioSource.SilentBuffer(Cryville.Audio.WaveFormat,System.Byte[],System.Int32,System.Int32)">
			<summary>
			将静音填充到缓存。
			</summary>
			<param name="format">波形格式。</param>
			<param name="buffer">被填充的缓存。</param>
			<param name="offset"><paramref name="buffer" /> 中开始填充处的索引（字节）。</param>
			<param name="length">需要填充的长度（字节）。</param>
			<remarks>
			出于性能优化，调用者必须确保 <paramref name="buffer" /> 不为 <see langword="null" /> 且 <paramref name="length" /> 不大于 <paramref name="buffer" /> 的长度。
			</remarks>
		</member>
		<member name="T:Cryville.Audio.Source.CachedAudioSource">
			<summary>
			一个缓存数据并对其进行复用的 <see cref="T:Cryville.Audio.Source.AudioSource" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.CachedAudioSource.#ctor(Cryville.Audio.Source.AudioSource,System.Double)">
			<summary>
			创建一个 <see cref="T:Cryville.Audio.Source.CachedAudioSource" /> 类的实例。
			</summary>
			<param name="source">被缓存的 <see cref="T:Cryville.Audio.Source.AudioSource" />。</param>
			<param name="duration">缓存长度（秒）。</param>
		</member>
		<member name="M:Cryville.Audio.Source.CachedAudioSource.Clone">
			<summary>
			获取一个时间戳归零的该 <see cref="T:Cryville.Audio.Source.CachedAudioSource" /> 的副本。
			</summary>
			<returns>一个时间戳归零的该 <see cref="T:Cryville.Audio.Source.CachedAudioSource" /> 的副本。</returns>
			<remarks>
			推荐配合对象池使用。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.Source.CachedAudioSource.Rewind">
			<summary>
			归零时间戳以复用该实例。
			</summary>
			<remarks>
			推荐配合对象池使用。
			</remarks>
		</member>
		<member name="P:Cryville.Audio.Source.CachedAudioSource.EndOfData">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.CachedAudioSource.Dispose(System.Boolean)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.CachedAudioSource.IsFormatSupported(Cryville.Audio.WaveFormat)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.CachedAudioSource.OnSetFormat">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.CachedAudioSource.FillBuffer(System.Byte[],System.Int32,System.Int32)">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.Source.FunctionAudioSource">
			<summary>
			一个以给定函数生成波形数据的 <see cref="T:Cryville.Audio.Source.AudioSource" />。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.FunctionAudioSource.Channels">
			<summary>
			输出波形格式的声道数。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.FunctionAudioSource.Dispose(System.Boolean)">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Source.FunctionAudioSource.EndOfData">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.FunctionAudioSource.IsFormatSupported(Cryville.Audio.WaveFormat)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.FunctionAudioSource.FillBuffer(System.Byte[],System.Int32,System.Int32)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.FunctionAudioSource.Func(System.Double,System.Int32)">
			<summary>
			用于生成波形的函数。
			</summary>
			<param name="time">时间（秒）。</param>
			<param name="channel">声道索引。</param>
		</member>
		<member name="T:Cryville.Audio.Source.LibavFileAudioSource">
			<summary>
			一个使用 Libav 解流并解码音频文件的 <see cref="T:Cryville.Audio.Source.AudioSource" />。
			</summary>
			<remarks>
			播放前必须调用 <see cref="M:Cryville.Audio.Source.LibavFileAudioSource.SelectStream" /> 或 <see cref="M:Cryville.Audio.Source.LibavFileAudioSource.SelectStream(System.Int32)" /> 以选择一个音频流。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.#ctor(System.String)">
			<summary>
			创建一个 <see cref="T:Cryville.Audio.Source.LibavFileAudioSource" /> 类的实例并加载指定的 <paramref name="file" />。
			</summary>
			<param name="file">音频文件。</param>
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.Dispose(System.Boolean)">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Source.LibavFileAudioSource.EndOfData">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Source.LibavFileAudioSource.BestStreamIndex">
			<summary>
			最佳音频流的索引。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.LibavFileAudioSource.Streams">
			<summary>
			所有音频流的索引集。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.SelectStream">
			<summary>
			选择最佳音频流作为音频源。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.SelectStream(System.Int32)">
			<summary>
			选择一个音频流作为音频源。
			</summary>
			<param name="index">音频流的索引。</param>
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.GetDuration(System.Int32)">
			<summary>
			获取一个流或当前文件的长度。
			</summary>
			<param name="streamId">流索引。如果指定 <c>-1</c> 则返回文件的长度。</param>
			<returns>长度（秒）。</returns>
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.OnSetFormat">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.FillBuffer(System.Byte[],System.Int32,System.Int32)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.LibavFileAudioSource.IsFormatSupported(Cryville.Audio.WaveFormat)">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.Source.SimpleSequencerSource">
			<summary>
			一个对序列中的音频源进行混音的简单 <see cref="T:Cryville.Audio.Source.AudioSource" />。
			</summary>
			<remarks>
			<para>使用该类可参照以下步骤：</para>
			<list type="number">
			<item>创建一个 <see cref="T:Cryville.Audio.Source.SimpleSequencerSource" /> 类的实例。</item>
			<item>通过设置 <see cref="P:Cryville.Audio.AudioClient.Source" /> 将 <see cref="T:Cryville.Audio.Source.SimpleSequencerSource" /> 绑定到一个 <see cref="T:Cryville.Audio.AudioClient" />。</item>
			<item>调用 <see cref="M:Cryville.Audio.Source.SimpleSequencerSource.NewSession" /> 创建一个新的 <see cref="T:Cryville.Audio.Source.SimpleSequencerSession" />。</item>
			<item>调用 <see cref="M:Cryville.Audio.AudioClient.Start" /> 并将 <see cref="P:Cryville.Audio.Source.SimpleSequencerSource.Playing" /> 设为 <see langword="true" /> 开始播放。</item>
			</list>
			<para>播放开始前后都可以将 <see cref="T:Cryville.Audio.Source.AudioSource" /> 序列至 <see cref="T:Cryville.Audio.Source.SimpleSequencerSession" />。参见 <see cref="M:Cryville.Audio.Source.SimpleSequencerSession.Sequence(System.Double,Cryville.Audio.Source.AudioSource)" />。</para>
			<para>如果 <see cref="P:Cryville.Audio.Source.SimpleSequencerSource.Playing" /> 被设为 <see langword="false" />，输出将变为静音。</para>
			</remarks>
		</member>
		<member name="M:Cryville.Audio.Source.SimpleSequencerSource.#ctor(System.Int32)">
			<summary>
			创建一个 <see cref="T:Cryville.Audio.Source.SimpleSequencerSource" /> 类的实例。
			</summary>
			<param name="maxPolyphony">序列器的最大复音数。必须大于 0。参见 <see cref="P:Cryville.Audio.Source.SimpleSequencerSource.MaxPolyphony"/>。</param>
		</member>
		<member name="M:Cryville.Audio.Source.SimpleSequencerSource.Dispose(System.Boolean)">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Source.SimpleSequencerSource.EndOfData">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.SimpleSequencerSource.OnSetFormat">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Source.SimpleSequencerSource.IsFormatSupported(Cryville.Audio.WaveFormat)">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Source.SimpleSequencerSource.Playing">
			<summary>
			当前会话是否正在播放。
			</summary>
			<remarks>
			播放状态切换时有一个小延迟，大约是 <see cref="P:Cryville.Audio.AudioClient.BufferPosition" /> 减去 <see cref="P:Cryville.Audio.AudioClient.Position" />。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.Source.SimpleSequencerSource.FillBuffer(System.Byte[],System.Int32,System.Int32)">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Source.SimpleSequencerSource.Polyphony">
			<summary>
			复音数，当前正在播放的音频源数量。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.SimpleSequencerSource.MaxPolyphony">
			<summary>
			最大复音数，可以同时播放音频源的最大数量。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.SimpleSequencerSource.Session">
			<summary>
			当前正在播放的 <see cref="T:Cryville.Audio.Source.SimpleSequencerSession" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.SimpleSequencerSource.NewSession">
			<summary>
			停止当前会话，创建一个新的 <see cref="T:Cryville.Audio.Source.SimpleSequencerSession" /> 将其替换。
			</summary>
			<remarks>
			创建前必须先绑定 <see cref="T:Cryville.Audio.AudioClient" />。
			</remarks>
		</member>
		<member name="T:Cryville.Audio.Source.SimpleSequencerSession">
			<summary>
			<see cref="T:Cryville.Audio.Source.SimpleSequencerSource" /> 的会话。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.SimpleSequencerSession.Sequence(System.Double,Cryville.Audio.Source.AudioSource)">
			<summary>
			将 <paramref name="source" /> 序列至指定的 <paramref name="time" />。
			</summary>
			<param name="time">时间（秒）。</param>
			<param name="source">音频源。</param>
			<remarks>
			<para>如果 <paramref name="time" /> 小于当前时间，<paramref name="source" /> 将被立刻播放。</para>
			<para>如果正在播放的音频源数量超过了 <see cref="P:Cryville.Audio.Source.SimpleSequencerSource.MaxPolyphony" />，<paramref name="source" /> 将被丢弃。</para>
			</remarks>
		</member>
		<member name="T:Cryville.Audio.Source.SingleToneAudioSource">
			<summary>
			一个生成单调声调的 <see cref="T:Cryville.Audio.Source.AudioSource" />。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.SingleToneAudioSource.Type">
			<summary>
			声调类型。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.SingleToneAudioSource.Frequency">
			<summary>
			波形频率。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Source.SingleToneAudioSource.Amplitude">
			<summary>
			波形振幅。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Source.SingleToneAudioSource.Func(System.Double,System.Int32)">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.Source.ToneType">
			<summary>
			声调类型。
			</summary>
		</member>
		<member name="F:Cryville.Audio.Source.ToneType.Sine">
			<summary>
			正弦波。
			</summary>
		</member>
		<member name="F:Cryville.Audio.Source.ToneType.Triangle">
			<summary>
			锯齿波。
			</summary>
		</member>
		<member name="F:Cryville.Audio.Source.ToneType.Square">
			<summary>
			方波。
			</summary>
		</member>
		<member name="T:Cryville.Audio.Wasapi.AudioClient">
			<summary>
			一个与 Wasapi 交互的 <see cref="T:Cryville.Audio.AudioClient" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Wasapi.AudioClient.Finalize">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Wasapi.AudioClient.Dispose(System.Boolean)">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.Device">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.DefaultBufferDuration">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.MinimumBufferDuration">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.DefaultFormat">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.Format">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.BufferSize">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.MaximumLatency">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.Position">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.AudioClient.BufferPosition">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Wasapi.AudioClient.IsFormatSupported(Cryville.Audio.WaveFormat,System.Nullable{Cryville.Audio.WaveFormat}@,Cryville.Audio.AudioShareMode)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Wasapi.AudioClient.Init(Cryville.Audio.WaveFormat,System.Single,Cryville.Audio.AudioShareMode)">
			<summary>
			初始化客户端。
			</summary>
			<param name="format">波形格式。</param>
			<param name="bufferDuration">连接的缓存时长（毫秒）。如果该值太小，则其将被限制到 <see cref="P:Cryville.Audio.Wasapi.AudioClient.MinimumBufferDuration" />。如果 <paramref name="shareMode" /> 为 <see cref="F:Cryville.Audio.AudioShareMode.Shared" />，缓存时长将自动决定，且该参数无效。</param>
			<param name="shareMode">连接的共享模式。</param>
		</member>
		<member name="M:Cryville.Audio.Wasapi.AudioClient.Start">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Wasapi.AudioClient.Pause">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.Wasapi.MMDevice">
			<summary>
			一个与 Wasapi 交互的 <see cref="T:Cryville.Audio.IAudioDevice" />。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Wasapi.MMDevice.Properties">
			<summary>
			设备的属性。
			</summary>
		</member>
		<member name="P:Cryville.Audio.Wasapi.MMDevice.Name">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.Wasapi.MMDevice.DataFlow">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Wasapi.MMDevice.Connect">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.Wasapi.MMDeviceEnumerator">
			<summary>
			一个与 Wasapi 交互的 <see cref="T:Cryville.Audio.IAudioDeviceManager" />。
			</summary>
			<remarks>
			需要 <c>Cryville.Audio.WasapiWrapper.dll</c>。
			</remarks>
		</member>
		<member name="M:Cryville.Audio.Wasapi.MMDeviceEnumerator.#ctor">
			<summary>
			创建一个 <see cref="T:Cryville.Audio.Wasapi.MMDeviceEnumerator" /> 类的实例。
			</summary>
		</member>
		<member name="M:Cryville.Audio.Wasapi.MMDeviceEnumerator.GetDevices(Cryville.Audio.DataFlow)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.Wasapi.MMDeviceEnumerator.GetDefaultDevice(Cryville.Audio.DataFlow)">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.WaveFormat">
			<summary>
			波形格式。
			</summary>
		</member>
		<member name="P:Cryville.Audio.WaveFormat.Channels">
			<summary>
			声道数。
			</summary>
		</member>
		<member name="P:Cryville.Audio.WaveFormat.SampleRate">
			<summary>
			采样率（每秒样本数）。
			</summary>
		</member>
		<member name="P:Cryville.Audio.WaveFormat.SampleFormat">
			<summary>
			样本格式。
			</summary>
		</member>
		<member name="P:Cryville.Audio.WaveFormat.BitsPerSample">
			<summary>
			每样本位数。
			</summary>
		</member>
		<member name="P:Cryville.Audio.WaveFormat.BytesPerSecond">
			<summary>
			每秒字节数。
			</summary>
		</member>
		<member name="F:Cryville.Audio.WaveFormat.Default">
			<summary>
			默认波形格式。
			</summary>
		</member>
		<member name="M:Cryville.Audio.WaveFormat.Align(System.Double)">
			<summary>
			获取对齐的缓存大小。
			</summary>
			<param name="size">需要的缓存大小（字节）。</param>
			<returns>对齐的缓存大小（字节）。</returns>
		</member>
		<member name="M:Cryville.Audio.WaveFormat.ToString">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.SampleFormat">
			<summary>
			样本格式。
			</summary>
		</member>
		<member name="F:Cryville.Audio.SampleFormat.Unsigned8">
			<summary>
			无符号 8 位整型样本格式。
			</summary>
		</member>
		<member name="F:Cryville.Audio.SampleFormat.Signed16">
			<summary>
			有符号 16 位整型样本格式。
			</summary>
		</member>
		<member name="F:Cryville.Audio.SampleFormat.Signed24">
			<summary>
			有符号 24 位整型样本格式。
			</summary>
		</member>
		<member name="F:Cryville.Audio.SampleFormat.Signed32">
			<summary>
			有符号 32 位整型样本格式。
			</summary>
		</member>
		<member name="F:Cryville.Audio.SampleFormat.Binary32">
			<summary>
			IEEE 754 单精度浮点型样本格式。
			</summary>
		</member>
		<member name="F:Cryville.Audio.SampleFormat.Binary64">
			<summary>
			IEEE 754 双精度浮点型样本格式。
			</summary>
		</member>
		<member name="T:Cryville.Audio.WinMM.WaveOutClient">
			<summary>
			一个与 WinMM 交互的 <see cref="T:Cryville.Audio.AudioClient" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutClient.Dispose(System.Boolean)">
			<summary>
			执行与释放或重置非托管资源关联的应用程序定义的任务。
			</summary>
			<param name="disposing">该方法是否由用户调用。</param>
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.Device">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.DefaultBufferDuration">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.MinimumBufferDuration">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.DefaultFormat">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.Format">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.BufferSize">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.MaximumLatency">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.Position">
			<inheritdoc />
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutClient.BufferPosition">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutClient.Init(Cryville.Audio.WaveFormat,System.Single,Cryville.Audio.AudioShareMode)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutClient.IsFormatSupported(Cryville.Audio.WaveFormat,System.Nullable{Cryville.Audio.WaveFormat}@,Cryville.Audio.AudioShareMode)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutClient.Start">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutClient.Pause">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.WinMM.WaveOutDevice">
			<summary>
			一个与 WinMM 交互的 <see cref="T:Cryville.Audio.IAudioDevice" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutDevice.Dispose">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutDevice.Dispose(System.Boolean)">
			<summary>
			执行与释放或重置非托管资源关联的应用程序定义的任务。
			</summary>
			<param name="disposing">该方法是否由用户调用。</param>
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutDevice.Name">
			<summary>
			设备的通俗名称。
			</summary>
			<remarks>由于技术原因，该属性最大字符数限制为 31。</remarks>
		</member>
		<member name="P:Cryville.Audio.WinMM.WaveOutDevice.DataFlow">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveOutDevice.Connect">
			<inheritdoc />
		</member>
		<member name="T:Cryville.Audio.WinMM.WaveDeviceManager">
			<summary>
			一个与 WinMM 交互的 <see cref="T:Cryville.Audio.IAudioDeviceManager" />。
			</summary>
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveDeviceManager.#ctor">
			<summary>
			创建一个 <see cref="T:Cryville.Audio.WinMM.WaveDeviceManager" /> 类的实例。
			</summary>
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveDeviceManager.Dispose">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveDeviceManager.Dispose(System.Boolean)">
			<summary>
			执行与释放或重置非托管资源关联的应用程序定义的任务。
			</summary>
			<param name="disposing">该方法是否由用户调用。</param>
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveDeviceManager.GetDefaultDevice(Cryville.Audio.DataFlow)">
			<inheritdoc />
		</member>
		<member name="M:Cryville.Audio.WinMM.WaveDeviceManager.GetDevices(Cryville.Audio.DataFlow)">
			<inheritdoc />
		</member>
	</members>
</doc>
