//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Oboe {

public class StabilizedCallback : AudioStreamCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal StabilizedCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(oboePINVOKE.StabilizedCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StabilizedCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          oboePINVOKE.delete_StabilizedCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public StabilizedCallback(AudioStreamCallback callback) : this(oboePINVOKE.new_StabilizedCallback(AudioStreamCallback.getCPtr(callback)), true) {
  }

  public override DataCallbackResult onAudioReady(AudioStream oboeStream, SWIGTYPE_p_void audioData, int numFrames) {
    DataCallbackResult ret = (DataCallbackResult)oboePINVOKE.StabilizedCallback_onAudioReady(swigCPtr, AudioStream.getCPtr(oboeStream), SWIGTYPE_p_void.getCPtr(audioData), numFrames);
    return ret;
  }

  public void onErrorBeforeClose(AudioStream oboeStream, Result error) {
    oboePINVOKE.StabilizedCallback_onErrorBeforeClose(swigCPtr, AudioStream.getCPtr(oboeStream), (int)error);
  }

  public void onErrorAfterClose(AudioStream oboeStream, Result error) {
    oboePINVOKE.StabilizedCallback_onErrorAfterClose(swigCPtr, AudioStream.getCPtr(oboeStream), (int)error);
  }

}

}
