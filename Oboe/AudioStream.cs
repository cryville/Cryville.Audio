//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Oboe {

public class AudioStream : AudioStreamBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AudioStream(global::System.IntPtr cPtr, bool cMemoryOwn) : base(oboePINVOKE.AudioStream_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioStream obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          oboePINVOKE.delete_AudioStream(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual Result open() {
    Result ret = (Result)oboePINVOKE.AudioStream_open(swigCPtr);
    return ret;
  }

  public virtual Result close() {
    Result ret = (Result)oboePINVOKE.AudioStream_close(swigCPtr);
    return ret;
  }

  public virtual Result start(long timeoutNanoseconds) {
    Result ret = (Result)oboePINVOKE.AudioStream_start__SWIG_0(swigCPtr, timeoutNanoseconds);
    return ret;
  }

  public virtual Result start() {
    Result ret = (Result)oboePINVOKE.AudioStream_start__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual Result pause(long timeoutNanoseconds) {
    Result ret = (Result)oboePINVOKE.AudioStream_pause__SWIG_0(swigCPtr, timeoutNanoseconds);
    return ret;
  }

  public virtual Result pause() {
    Result ret = (Result)oboePINVOKE.AudioStream_pause__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual Result flush(long timeoutNanoseconds) {
    Result ret = (Result)oboePINVOKE.AudioStream_flush__SWIG_0(swigCPtr, timeoutNanoseconds);
    return ret;
  }

  public virtual Result flush() {
    Result ret = (Result)oboePINVOKE.AudioStream_flush__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual Result stop(long timeoutNanoseconds) {
    Result ret = (Result)oboePINVOKE.AudioStream_stop__SWIG_0(swigCPtr, timeoutNanoseconds);
    return ret;
  }

  public virtual Result stop() {
    Result ret = (Result)oboePINVOKE.AudioStream_stop__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual Result requestStart() {
    Result ret = (Result)oboePINVOKE.AudioStream_requestStart(swigCPtr);
    return ret;
  }

  public virtual Result requestPause() {
    Result ret = (Result)oboePINVOKE.AudioStream_requestPause(swigCPtr);
    return ret;
  }

  public virtual Result requestFlush() {
    Result ret = (Result)oboePINVOKE.AudioStream_requestFlush(swigCPtr);
    return ret;
  }

  public virtual Result requestStop() {
    Result ret = (Result)oboePINVOKE.AudioStream_requestStop(swigCPtr);
    return ret;
  }

  public virtual StreamState getState() {
    StreamState ret = (StreamState)oboePINVOKE.AudioStream_getState(swigCPtr);
    return ret;
  }

  public virtual Result waitForStateChange(StreamState inputState, SWIGTYPE_p_oboe__StreamState nextState, long timeoutNanoseconds) {
    Result ret = (Result)oboePINVOKE.AudioStream_waitForStateChange(swigCPtr, (int)inputState, SWIGTYPE_p_oboe__StreamState.getCPtr(nextState), timeoutNanoseconds);
    return ret;
  }

  public virtual ResultWithInt setBufferSizeInFrames(int arg0) {
    ResultWithInt ret = new ResultWithInt(oboePINVOKE.AudioStream_setBufferSizeInFrames(swigCPtr, arg0), true);
    return ret;
  }

  public virtual ResultWithInt getXRunCount() {
    ResultWithInt ret = new ResultWithInt(oboePINVOKE.AudioStream_getXRunCount(swigCPtr), true);
    return ret;
  }

  public virtual bool isXRunCountSupported() {
    bool ret = oboePINVOKE.AudioStream_isXRunCountSupported(swigCPtr);
    return ret;
  }

  public int getFramesPerBurst() {
    int ret = oboePINVOKE.AudioStream_getFramesPerBurst(swigCPtr);
    return ret;
  }

  public int getBytesPerFrame() {
    int ret = oboePINVOKE.AudioStream_getBytesPerFrame(swigCPtr);
    return ret;
  }

  public int getBytesPerSample() {
    int ret = oboePINVOKE.AudioStream_getBytesPerSample(swigCPtr);
    return ret;
  }

  public virtual long getFramesWritten() {
    long ret = oboePINVOKE.AudioStream_getFramesWritten(swigCPtr);
    return ret;
  }

  public virtual long getFramesRead() {
    long ret = oboePINVOKE.AudioStream_getFramesRead(swigCPtr);
    return ret;
  }

  public virtual ResultWithDouble calculateLatencyMillis() {
    ResultWithDouble ret = new ResultWithDouble(oboePINVOKE.AudioStream_calculateLatencyMillis(swigCPtr), true);
    return ret;
  }

  public virtual Result getTimestamp(SWIGTYPE_p___kernel_clockid_t arg0, SWIGTYPE_p_long_long arg1, SWIGTYPE_p_long_long arg2) {
    Result ret = (Result)oboePINVOKE.AudioStream_getTimestamp__SWIG_0(swigCPtr, SWIGTYPE_p___kernel_clockid_t.getCPtr(arg0), SWIGTYPE_p_long_long.getCPtr(arg1), SWIGTYPE_p_long_long.getCPtr(arg2));
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_oboe__ResultWithValueT_oboe__FrameTimestamp_t getTimestamp(SWIGTYPE_p___kernel_clockid_t arg0) {
    SWIGTYPE_p_oboe__ResultWithValueT_oboe__FrameTimestamp_t ret = new SWIGTYPE_p_oboe__ResultWithValueT_oboe__FrameTimestamp_t(oboePINVOKE.AudioStream_getTimestamp__SWIG_1(swigCPtr, SWIGTYPE_p___kernel_clockid_t.getCPtr(arg0)), true);
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ResultWithInt write(SWIGTYPE_p_void arg0, int arg1, long arg2) {
    ResultWithInt ret = new ResultWithInt(oboePINVOKE.AudioStream_write(swigCPtr, SWIGTYPE_p_void.getCPtr(arg0), arg1, arg2), true);
    return ret;
  }

  public virtual ResultWithInt read(SWIGTYPE_p_void arg0, int arg1, long arg2) {
    ResultWithInt ret = new ResultWithInt(oboePINVOKE.AudioStream_read(swigCPtr, SWIGTYPE_p_void.getCPtr(arg0), arg1, arg2), true);
    return ret;
  }

  public virtual AudioApi getAudioApi() {
    AudioApi ret = (AudioApi)oboePINVOKE.AudioStream_getAudioApi(swigCPtr);
    return ret;
  }

  public bool usesAAudio() {
    bool ret = oboePINVOKE.AudioStream_usesAAudio(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_void getUnderlyingStream() {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStream_getUnderlyingStream(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual void updateFramesWritten() {
    oboePINVOKE.AudioStream_updateFramesWritten(swigCPtr);
  }

  public virtual void updateFramesRead() {
    oboePINVOKE.AudioStream_updateFramesRead(swigCPtr);
  }

  public AudioStreamDataCallback swapDataCallback(AudioStreamDataCallback dataCallback) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStream_swapDataCallback(swigCPtr, AudioStreamDataCallback.getCPtr(dataCallback));
    AudioStreamDataCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamDataCallback(cPtr, false);
    return ret;
  }

  public AudioStreamErrorCallback swapErrorCallback(AudioStreamErrorCallback errorCallback) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStream_swapErrorCallback(swigCPtr, AudioStreamErrorCallback.getCPtr(errorCallback));
    AudioStreamErrorCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamErrorCallback(cPtr, false);
    return ret;
  }

  public ResultWithInt getAvailableFrames() {
    ResultWithInt ret = new ResultWithInt(oboePINVOKE.AudioStream_getAvailableFrames(swigCPtr), true);
    return ret;
  }

  public ResultWithInt waitForAvailableFrames(int numFrames, long timeoutNanoseconds) {
    ResultWithInt ret = new ResultWithInt(oboePINVOKE.AudioStream_waitForAvailableFrames(swigCPtr, numFrames, timeoutNanoseconds), true);
    return ret;
  }

  public virtual Result getLastErrorCallbackResult() {
    Result ret = (Result)oboePINVOKE.AudioStream_getLastErrorCallbackResult(swigCPtr);
    return ret;
  }

}

}
