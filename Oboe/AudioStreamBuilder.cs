//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Oboe {

public class AudioStreamBuilder : AudioStreamBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AudioStreamBuilder(global::System.IntPtr cPtr, bool cMemoryOwn) : base(oboePINVOKE.AudioStreamBuilder_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioStreamBuilder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          oboePINVOKE.delete_AudioStreamBuilder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public AudioStreamBuilder() : this(oboePINVOKE.new_AudioStreamBuilder__SWIG_0(), true) {
  }

  public AudioStreamBuilder(AudioStreamBase audioStreamBase) : this(oboePINVOKE.new_AudioStreamBuilder__SWIG_1(AudioStreamBase.getCPtr(audioStreamBase)), true) {
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
  }

  public AudioStreamBuilder setChannelCount(int channelCount) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setChannelCount(swigCPtr, channelCount);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setDirection(Direction direction) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setDirection(swigCPtr, (int)direction);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setSampleRate(int sampleRate) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setSampleRate(swigCPtr, sampleRate);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setFramesPerCallback(int framesPerCallback) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setFramesPerCallback(swigCPtr, framesPerCallback);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setFramesPerDataCallback(int framesPerCallback) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setFramesPerDataCallback(swigCPtr, framesPerCallback);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setFormat(AudioFormat format) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setFormat(swigCPtr, (int)format);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setBufferCapacityInFrames(int bufferCapacityInFrames) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setBufferCapacityInFrames(swigCPtr, bufferCapacityInFrames);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioApi getAudioApi() {
    AudioApi ret = (AudioApi)oboePINVOKE.AudioStreamBuilder_getAudioApi(swigCPtr);
    return ret;
  }

  public AudioStreamBuilder setAudioApi(AudioApi audioApi) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setAudioApi(swigCPtr, (int)audioApi);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public static bool isAAudioSupported() {
    bool ret = oboePINVOKE.AudioStreamBuilder_isAAudioSupported();
    return ret;
  }

  public static bool isAAudioRecommended() {
    bool ret = oboePINVOKE.AudioStreamBuilder_isAAudioRecommended();
    return ret;
  }

  public AudioStreamBuilder setSharingMode(SharingMode sharingMode) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setSharingMode(swigCPtr, (int)sharingMode);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setPerformanceMode(PerformanceMode performanceMode) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setPerformanceMode(swigCPtr, (int)performanceMode);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setUsage(Usage usage) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setUsage(swigCPtr, (int)usage);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setContentType(ContentType contentType) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setContentType(swigCPtr, (int)contentType);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setInputPreset(InputPreset inputPreset) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setInputPreset(swigCPtr, (int)inputPreset);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setSessionId(SessionId sessionId) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setSessionId(swigCPtr, (int)sessionId);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setDeviceId(int deviceId) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setDeviceId(swigCPtr, deviceId);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setDataCallback(AudioStreamDataCallback dataCallback) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setDataCallback(swigCPtr, AudioStreamDataCallback.getCPtr(dataCallback));
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setErrorCallback(AudioStreamErrorCallback errorCallback) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setErrorCallback(swigCPtr, AudioStreamErrorCallback.getCPtr(errorCallback));
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setCallback(AudioStreamCallback streamCallback) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setCallback(swigCPtr, AudioStreamCallback.getCPtr(streamCallback));
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setChannelConversionAllowed(bool allowed) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setChannelConversionAllowed(swigCPtr, allowed);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setFormatConversionAllowed(bool allowed) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setFormatConversionAllowed(swigCPtr, allowed);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setSampleRateConversionQuality(SampleRateConversionQuality quality) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setSampleRateConversionQuality(swigCPtr, (int)quality);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    return ret;
  }

  public AudioStreamBuilder setPackageName(string packageName) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setPackageName(swigCPtr, packageName);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AudioStreamBuilder setAttributionTag(string attributionTag) {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBuilder_setAttributionTag(swigCPtr, attributionTag);
    AudioStreamBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamBuilder(cPtr, false);
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool willUseAAudio() {
    bool ret = oboePINVOKE.AudioStreamBuilder_willUseAAudio(swigCPtr);
    return ret;
  }

  public Result openStream(SWIGTYPE_p_p_oboe__AudioStream stream) {
    Result ret = (Result)oboePINVOKE.AudioStreamBuilder_openStream__SWIG_0(swigCPtr, SWIGTYPE_p_p_oboe__AudioStream.getCPtr(stream));
    return ret;
  }

  public Result openStream(AudioStreamPtr stream) {
    Result ret = (Result)oboePINVOKE.AudioStreamBuilder_openStream__SWIG_1(swigCPtr, AudioStreamPtr.getCPtr(stream));
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Result openManagedStream(SWIGTYPE_p_std__unique_ptrT_oboe__AudioStream_oboe__StreamDeleterFunctor_t stream) {
    Result ret = (Result)oboePINVOKE.AudioStreamBuilder_openManagedStream(swigCPtr, SWIGTYPE_p_std__unique_ptrT_oboe__AudioStream_oboe__StreamDeleterFunctor_t.getCPtr(stream));
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
