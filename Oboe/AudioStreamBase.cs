//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Oboe {

public class AudioStreamBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AudioStreamBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioStreamBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AudioStreamBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          oboePINVOKE.delete_AudioStreamBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public AudioStreamBase() : this(oboePINVOKE.new_AudioStreamBase__SWIG_0(), true) {
  }

  public AudioStreamBase(AudioStreamBase arg0) : this(oboePINVOKE.new_AudioStreamBase__SWIG_1(AudioStreamBase.getCPtr(arg0)), true) {
    if (oboePINVOKE.SWIGPendingException.Pending) throw oboePINVOKE.SWIGPendingException.Retrieve();
  }

  public int getChannelCount() {
    int ret = oboePINVOKE.AudioStreamBase_getChannelCount(swigCPtr);
    return ret;
  }

  public Direction getDirection() {
    Direction ret = (Direction)oboePINVOKE.AudioStreamBase_getDirection(swigCPtr);
    return ret;
  }

  public int getSampleRate() {
    int ret = oboePINVOKE.AudioStreamBase_getSampleRate(swigCPtr);
    return ret;
  }

  public int getFramesPerCallback() {
    int ret = oboePINVOKE.AudioStreamBase_getFramesPerCallback(swigCPtr);
    return ret;
  }

  public int getFramesPerDataCallback() {
    int ret = oboePINVOKE.AudioStreamBase_getFramesPerDataCallback(swigCPtr);
    return ret;
  }

  public AudioFormat getFormat() {
    AudioFormat ret = (AudioFormat)oboePINVOKE.AudioStreamBase_getFormat(swigCPtr);
    return ret;
  }

  public virtual int getBufferSizeInFrames() {
    int ret = oboePINVOKE.AudioStreamBase_getBufferSizeInFrames(swigCPtr);
    return ret;
  }

  public virtual int getBufferCapacityInFrames() {
    int ret = oboePINVOKE.AudioStreamBase_getBufferCapacityInFrames(swigCPtr);
    return ret;
  }

  public SharingMode getSharingMode() {
    SharingMode ret = (SharingMode)oboePINVOKE.AudioStreamBase_getSharingMode(swigCPtr);
    return ret;
  }

  public PerformanceMode getPerformanceMode() {
    PerformanceMode ret = (PerformanceMode)oboePINVOKE.AudioStreamBase_getPerformanceMode(swigCPtr);
    return ret;
  }

  public int getDeviceId() {
    int ret = oboePINVOKE.AudioStreamBase_getDeviceId(swigCPtr);
    return ret;
  }

  public AudioStreamDataCallback getDataCallback() {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBase_getDataCallback(swigCPtr);
    AudioStreamDataCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamDataCallback(cPtr, false);
    return ret;
  }

  public AudioStreamErrorCallback getErrorCallback() {
    global::System.IntPtr cPtr = oboePINVOKE.AudioStreamBase_getErrorCallback(swigCPtr);
    AudioStreamErrorCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioStreamErrorCallback(cPtr, false);
    return ret;
  }

  public bool isDataCallbackSpecified() {
    bool ret = oboePINVOKE.AudioStreamBase_isDataCallbackSpecified(swigCPtr);
    return ret;
  }

  public bool isErrorCallbackSpecified() {
    bool ret = oboePINVOKE.AudioStreamBase_isErrorCallbackSpecified(swigCPtr);
    return ret;
  }

  public Usage getUsage() {
    Usage ret = (Usage)oboePINVOKE.AudioStreamBase_getUsage(swigCPtr);
    return ret;
  }

  public ContentType getContentType() {
    ContentType ret = (ContentType)oboePINVOKE.AudioStreamBase_getContentType(swigCPtr);
    return ret;
  }

  public InputPreset getInputPreset() {
    InputPreset ret = (InputPreset)oboePINVOKE.AudioStreamBase_getInputPreset(swigCPtr);
    return ret;
  }

  public SessionId getSessionId() {
    SessionId ret = (SessionId)oboePINVOKE.AudioStreamBase_getSessionId(swigCPtr);
    return ret;
  }

  public bool isChannelConversionAllowed() {
    bool ret = oboePINVOKE.AudioStreamBase_isChannelConversionAllowed(swigCPtr);
    return ret;
  }

  public bool isFormatConversionAllowed() {
    bool ret = oboePINVOKE.AudioStreamBase_isFormatConversionAllowed(swigCPtr);
    return ret;
  }

  public SampleRateConversionQuality getSampleRateConversionQuality() {
    SampleRateConversionQuality ret = (SampleRateConversionQuality)oboePINVOKE.AudioStreamBase_getSampleRateConversionQuality(swigCPtr);
    return ret;
  }

}

}
